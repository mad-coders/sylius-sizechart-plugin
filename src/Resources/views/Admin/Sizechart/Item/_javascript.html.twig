{#
# This file is part of package:
# Sylius Size Chart Plugin
#
# @copyright MADCODERS Team (www.madcoders.co)
# @licence For the full copyright and license information, please view the LICENSE
#
# Architects of this package:
# @author Leonid Moshko <l.moshko@madcoders.pl>
# @author Piotr Lewandowski <p.lewandowski@madcoders.pl>
#}

<script data-attribute-options-criteria-url="{{ path('madcoders_sizechart_admin_size_chart_criteria_attribute_option', { 'attributeCode': '__attributeCode__' }) }}">
  (function () {
      const switchSelector = '#size_chart_criteria_attributes input[type="checkbox"]';

    const onSwitch = function(e) {
      const element = e.target;
      const state = element.checked;
      const attributeCode = element.value
      const optionsSelect = findOptionsField(attributeCode);
      const form = document.querySelector('form[name="size_chart"]');

      if (!form) {
        throw new Error('form cannot be found (selector: form[name="size_chart"])');
      }

      if (optionsSelect) {
        const optionsSelectContainer = optionsSelect.closest('.field');
        state ? show(optionsSelectContainer) : hide(optionsSelectContainer);
      } else {
        form.classList.add('loading');

        const request = new XMLHttpRequest();
        request.onreadystatechange = function () {
          if (request.readyState > 3) {
            if (request.status === 200) {
              let response = request.response;
              response = response.replace(/size_chart_attribute_option_prototype_____/g, 'size_chart[criteria][attribute'+attributeCode+']');
              const prevSwitch = prevOptionSelect(element);
              if (prevSwitch) {
                prevSwitch.insertAdjacentHTML('afterend', response);
              } else {
                document.getElementById('size_chart_criteria').insertAdjacentHTML('beforeend',response);
              }

              form.classList.remove('loading');
            } else {
              console.error('child form cannot be fetched');
            }
          }
        }

        request.open('GET', url(attributeCode));
        request.send();
      }
    };

    const prevOptionSelect = function (element) {
      let prevElement = element.closest('.field')
      prevElement = findPrevSibling(prevElement, '.field');
      if (!prevElement) {
        return null;
      }

      if (prevElement.querySelector('input[type="checkbox"]:checked')) {
        return findOptionsField(prevElement.querySelector('input[type="checkbox"]').value).closest('.field');
      } else {
        return prevOptionSelect(prevElement.querySelector('input[type="checkbox"]'));
      }
    };

    const url = function (attributeCode) {
      return document.querySelector('[data-attribute-options-criteria-url]')
        .getAttribute('data-attribute-options-criteria-url')
        .replace(/__attributeCode__/, attributeCode);
    };

    const show = function(element) {
      element.style.display = 'block';
    };

    const hide = function(element) {
      element.style.display = 'none';
    };

    const findOptionsField = function(attributeCode) {
      const selector = '#size_chart_criteria select[name="size_chart[criteria][attribute'+attributeCode+']"]';

      return document.querySelector(selector);
    };

    const findPrevSibling = function(element, selector) {
      while (element) {
        element = element.previousElementSibling
        if (element && element.matches(selector)) {
          return element;
        }
      }

      return null;
    };

    const bindEvents = function() {
      const switchCollection = document.querySelectorAll(switchSelector);
      if (switchCollection.length > 0) {
        switchCollection.forEach(function(element) {
          element.addEventListener('change', onSwitch)
        });
      }
    };

    const init = function() {
      bindEvents();
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  })();
</script>
